{"ast":null,"code":"import stringSimilarity from \"string-similarity\";\nimport { FixedStats } from \"../Datas/Stats\";\nimport { correctionMap } from \"../Datas/TextCorrection\";\nexport function OcrRetouch({\n  text,\n  lang\n}) {\n  if (!text || !Array.isArray(text)) return {\n    retType: [],\n    retValue: []\n  };\n  if (!lang) lang = \"en\";\n  const statList = FixedStats.map(stat => stat[lang]).filter(Boolean);\n  const correction = correctionMap[lang] || {};\n  const correctedText = text.map(t => correction[t] || t); // ✅ 보정 적용\n\n  let startIndex = -1;\n  for (let i = 0; i < correctedText.length; i++) {\n    const {\n      bestMatch\n    } = stringSimilarity.findBestMatch(correctedText[i], statList);\n    if (bestMatch.rating > 0.7) {\n      startIndex = i;\n      break;\n    }\n  }\n  if (startIndex === -1 || startIndex + 13 >= correctedText.length) {\n    return {\n      retType: [],\n      retValue: []\n    };\n  }\n  const retType = [];\n  const retValue = [];\n  for (let i = 0; i < 14; i += 2) {\n    const key = correctedText[startIndex + i];\n    const val = correctedText[startIndex + i + 1];\n    const {\n      bestMatch\n    } = stringSimilarity.findBestMatch(key, statList);\n    const matched = bestMatch.rating > 0.7 ? bestMatch.target : null;\n    if (matched) {\n      retType.push(matched);\n      retValue.push(val);\n    }\n  }\n  return {\n    retType,\n    retValue\n  };\n}\n_c = OcrRetouch;\nvar _c;\n$RefreshReg$(_c, \"OcrRetouch\");","map":{"version":3,"names":["stringSimilarity","FixedStats","correctionMap","OcrRetouch","text","lang","Array","isArray","retType","retValue","statList","map","stat","filter","Boolean","correction","correctedText","t","startIndex","i","length","bestMatch","findBestMatch","rating","key","val","matched","target","push","_c","$RefreshReg$"],"sources":["d:/project/_CodeFiles/wuthering/frontend/src/func/OcrRetouch.js"],"sourcesContent":["import stringSimilarity from \"string-similarity\";\r\nimport { FixedStats } from \"../Datas/Stats\";\r\nimport { correctionMap } from \"../Datas/TextCorrection\";\r\n\r\nexport function OcrRetouch({ text, lang }) {\r\n  if (!text || !Array.isArray(text)) return { retType: [], retValue: [] };\r\n  if (!lang) lang = \"en\";\r\n\r\n  const statList = FixedStats.map(stat => stat[lang]).filter(Boolean);\r\n  const correction = correctionMap[lang] || {};\r\n\r\n  const correctedText = text.map((t) => correction[t] || t); // ✅ 보정 적용\r\n\r\n  let startIndex = -1;\r\n\r\n  for (let i = 0; i < correctedText.length; i++) {\r\n    const { bestMatch } = stringSimilarity.findBestMatch(correctedText[i], statList);\r\n    if (bestMatch.rating > 0.7) {\r\n      startIndex = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (startIndex === -1 || startIndex + 13 >= correctedText.length) {\r\n    return { retType: [], retValue: [] };\r\n  }\r\n\r\n  const retType = [];\r\n  const retValue = [];\r\n\r\n  for (let i = 0; i < 14; i += 2) {\r\n    const key = correctedText[startIndex + i];\r\n    const val = correctedText[startIndex + i + 1];\r\n\r\n    const { bestMatch } = stringSimilarity.findBestMatch(key, statList);\r\n    const matched = bestMatch.rating > 0.7 ? bestMatch.target : null;\r\n\r\n    if (matched) {\r\n      retType.push(matched);\r\n      retValue.push(val);\r\n    }\r\n  }\r\n\r\n  return { retType, retValue };\r\n}\r\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,mBAAmB;AAChD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,aAAa,QAAQ,yBAAyB;AAEvD,OAAO,SAASC,UAAUA,CAAC;EAAEC,IAAI;EAAEC;AAAK,CAAC,EAAE;EACzC,IAAI,CAACD,IAAI,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE,OAAO;IAAEI,OAAO,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC;EACvE,IAAI,CAACJ,IAAI,EAAEA,IAAI,GAAG,IAAI;EAEtB,MAAMK,QAAQ,GAAGT,UAAU,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACP,IAAI,CAAC,CAAC,CAACQ,MAAM,CAACC,OAAO,CAAC;EACnE,MAAMC,UAAU,GAAGb,aAAa,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;EAE5C,MAAMW,aAAa,GAAGZ,IAAI,CAACO,GAAG,CAAEM,CAAC,IAAKF,UAAU,CAACE,CAAC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC;;EAE3D,IAAIC,UAAU,GAAG,CAAC,CAAC;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,aAAa,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAC7C,MAAM;MAAEE;IAAU,CAAC,GAAGrB,gBAAgB,CAACsB,aAAa,CAACN,aAAa,CAACG,CAAC,CAAC,EAAET,QAAQ,CAAC;IAChF,IAAIW,SAAS,CAACE,MAAM,GAAG,GAAG,EAAE;MAC1BL,UAAU,GAAGC,CAAC;MACd;IACF;EACF;EAEA,IAAID,UAAU,KAAK,CAAC,CAAC,IAAIA,UAAU,GAAG,EAAE,IAAIF,aAAa,CAACI,MAAM,EAAE;IAChE,OAAO;MAAEZ,OAAO,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC;EACtC;EAEA,MAAMD,OAAO,GAAG,EAAE;EAClB,MAAMC,QAAQ,GAAG,EAAE;EAEnB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9B,MAAMK,GAAG,GAAGR,aAAa,CAACE,UAAU,GAAGC,CAAC,CAAC;IACzC,MAAMM,GAAG,GAAGT,aAAa,CAACE,UAAU,GAAGC,CAAC,GAAG,CAAC,CAAC;IAE7C,MAAM;MAAEE;IAAU,CAAC,GAAGrB,gBAAgB,CAACsB,aAAa,CAACE,GAAG,EAAEd,QAAQ,CAAC;IACnE,MAAMgB,OAAO,GAAGL,SAAS,CAACE,MAAM,GAAG,GAAG,GAAGF,SAAS,CAACM,MAAM,GAAG,IAAI;IAEhE,IAAID,OAAO,EAAE;MACXlB,OAAO,CAACoB,IAAI,CAACF,OAAO,CAAC;MACrBjB,QAAQ,CAACmB,IAAI,CAACH,GAAG,CAAC;IACpB;EACF;EAEA,OAAO;IAAEjB,OAAO;IAAEC;EAAS,CAAC;AAC9B;AAACoB,EAAA,GAxCe1B,UAAU;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}